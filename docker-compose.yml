version: '3.8'

services:
  migrations:
    command: npx prisma migrate deploy
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api-migrations
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  nest-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api
    restart: always
    ports:
      - 8000:5000  # API должен слушать на порту 5000 в контейнере
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - uploads:/app/uploads  # Подключаем volume для хранения файлов

  tg-bot:
    command: node /app/telegamBot/telegram-bot-server.js
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tg-bot
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env

  postgres:
    image: postgres
    restart: on-failure
    env_file:
      - .env
    ports:
      - 5435:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    container_name: proxy_nginx
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - uploads:/var/www/uploads  # Подключаем volume к Nginx
    command: [nginx-debug, '-g', 'daemon off;']
    restart: always

  frontend:
    build:
      context: ../migs-frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - '3000:3000'
    restart: always

volumes:
  postgres-data:
  uploads:  # Volume для хранения файлов
