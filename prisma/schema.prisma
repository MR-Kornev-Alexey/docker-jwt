// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель данных для журнала посещения приложения
model appVisit {
  id      String   @id @default(uuid())
  date    DateTime @default(now()) @db.Timestamp(0)
  user    m_User   @relation(fields: [user_id], references: [id])
  user_id String // Ссылка на пользователя
}

// Определение модели пользователя
model m_User {
  id                  String                 @id @default(uuid())
  name                String
  email               String                 @unique
  telegramId          Int?
  password            String
  role                Role
  organization        m_Organisation         @relation(fields: [organization_id], references: [id])
  organization_id     String // Ссылка на организацию
  registration_status RegistrationStatus
  created_at          DateTime               @default(now()) @db.Timestamp(0)
  additionalUserInfo  m_AdditionalUserInfo[]
  appVisit            appVisit[]
}

model m_AdditionalUserInfo {
  user_id    String    @id // Первичный ключ
  user       m_User    @relation(fields: [user_id], references: [id])
  firstName  String?
  surName    String?
  phone      String?
  telegram   String?
  position   String?
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

// Определение модели организации
model m_Organisation {
  id                String     @id @default(uuid()) // UUID в качестве уникального идентификатора
  name              String
  inn               String
  address           String
  directorName      String
  organizationPhone String
  organizationEmail String
  users             m_User[] // Связь с пользователями
  objects           m_Object[] // Связь с объектами
}

// Определение модели объектов
model m_Object {
  id              String            @id @default(uuid()) // UUID в качестве уникального идентификатора
  organization    m_Organisation    @relation(fields: [organization_id], references: [id])
  organization_id String // Ссылка на организацию
  objectsType     ObjectsType
  objectsMaterial ObjectsMaterial
  geo             String
  name            String
  address         String
  notation        String
  set_null        Boolean           @default(false)
  periodicity     Int               @default(10000)
  Sensor          new_Sensor[]
  m_notifications m_notifications[]
}

model new_Sensor {
  id                     String                 @id @default(uuid()) // UUID в качестве уникального идентификатора
  object                 m_Object               @relation(fields: [object_id], references: [id])
  object_id              String // Ссылка на объект
  sensor_type            String
  sensor_key             String
  model                  String
  ip_address             String?
  designation            String?
  network_number         Int
  notation               String?
  run                    Boolean                @default(false)
  error_information      sensorErrorsLog[]
  additional_sensor_info additionalSensorInfo[]
  sensor_operation_log   sensorOperationLog[]
  files                  SensorFile[]
  dataFromSensor         dataFromSensor[]
  requestSensorInfo      requestSensorInfo[]
}

model additionalSensorInfo {
  id                           Int        @id @default(autoincrement())
  sensor                       new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id                    String
  factory_number               String?
  unit_of_measurement          String?
  installation_location        String?
  coefficient                  Float?     @default(1)
  limitValue                   Float?     @default(0)
  emissionsQuantity            Int?       @default(1)
  errorsQuantity               Int?       @default(1)
  missedConsecutive            Int?       @default(0)
  additionalSensorInfoNotation String?
}

model sensorOperationLog {
  id                         Int        @id @default(autoincrement())
  sensor                     new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id                  String // Добавляем поле для хранения ID датчика
  passport_information       String?
  verification_information   String?
  warranty_information       String?
  sensorOperationLogNotation String?
}

model sensorErrorsLog {
  id                Int        @id @default(autoincrement())
  sensor            new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id         String // Добавляем поле для хранения ID датчика
  error_information String?
  created_at        DateTime   @default(now()) @db.Timestamp(0)
}

model SensorFile {
  id        Int        @id @default(autoincrement())
  sensor    new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id String // Добавляем поле для хранения ID датчика
  url       String
}

model requestSensorInfo {
  id              Int        @id @default(autoincrement())
  sensor          new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id       String // Добавляем поле для хранения ID датчика
  periodicity     Int        @default(10000)
  request_code    String?
  counter         Int?       @default(0)
  alarm_counter   Int?       @default(0)
  last_base_value Float?     @default(0)
  last_valueX     Float?     @default(0)
  last_valueY     Float?     @default(0)
  last_valueZ     Float?     @default(0)
  base_zero       Float?     @default(0)
  min_base        Float?     @default(0)
  max_base        Float?     @default(0)
  warning         Boolean    @default(false)
}

model dataFromSensor {
  id           Int        @id @default(autoincrement())
  sensor       new_Sensor @relation(fields: [sensor_id], references: [id])
  sensor_id    String // Добавляем поле для хранения ID датчика
  request_code String
  answer_code  String
  created_at   DateTime   @default(now()) @db.Timestamp(0)
}

model m_notifications {
  id          Int      @id @default(autoincrement())
  object      m_Object @relation(fields: [object_id], references: [id])
  object_id   String // Ссылка на объект
  information String
  created_at  DateTime @default(now()) @db.Timestamp(0)
}

model type_Sensor {
  id          String   @id @default(uuid())
  sensor_key  String   @unique
  sensor_type String
  models      String[]
}

// Определение перечислений
enum Role {
  customer
  dispatcher
  admin
  supervisor
}

enum RegistrationStatus {
  RESET
  COMPLETED
  NOT_COMPLETED
}

enum ObjectsType {
  tower
  bridge
  building
  footbridge
  overpass
}

enum ObjectsMaterial {
  steel
  ferroconcrete
  wood
  mixed
}
